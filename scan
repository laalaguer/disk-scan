#!/usr/bin/env python3
''' Command line interface to disk scan '''
from typing import Set
from pathlib import Path
from disk_scan import utils
import click
import json


class Cache:
    def __init__(self):
        self.a = None
    
    def get(self):
        return self.a

    def populate(self, a):
        self.a = a


def progress(p: Path, show_progress=True) -> Cache:
    cache = Cache()
    for counter in utils.scan(p, cache.populate):
        if show_progress:
            print(f'\rScan: {str(p)} {counter}', end='')
    print()
    return cache


def d_progress(nodes: Set[Path], show_progress=True) -> Cache:
    cache = Cache()
    for current in utils.find_duplicates(nodes, cache.populate):
        if show_progress:
            show = str(current)
            show = show if len(show) < 79 else show[:75] + '...'
            print(f'\rReading: {show}', end='')
    print('')
    return cache


@click.group()
def cli():
    pass


@click.command()
@click.argument('dir', type=click.Path(exists=True, dir_okay=True, resolve_path=True), required=True)
@click.option('--json', 'json_', type=str, default=None, help='File name to save the result in json')
@click.option('--include-sys', is_flag=True, default=False, help='Include system files in scan.')
def duplicate(dir, json_, include_sys):
    '''
    Find duplicated files.
    '''
    p = Path(str(dir))
    cache = progress(p)
    nodes = cache.get()
    if not include_sys:
        nodes = utils.exclude_os_files(nodes)
    
    cache = d_progress(nodes)
    result = cache.get()

    if not json_:
        for md5_hash, paths in result.items():
            click.echo(md5_hash.hex())
            for x in paths:
                click.echo(str(x))
            click.echo('-' * 32)
    else:
        with open(json_, 'w') as f:
            r = {md5_hash.hex(): [str(x) for x in paths] for md5_hash, paths in result.items()}
            json.dump(r, f, indent=2)


@click.command()
@click.argument('dir', type=click.Path(exists=True, dir_okay=True, resolve_path=True), required=True)
@click.option('-s', '--size', type=int, required=True, prompt="Bigger than () MB?", help='Filter bigger than ? MB.')
@click.option('--json', 'json_', type=str, default=None, help='File name to save the result in json')
def bigfiles(dir, size, json_):
    '''
    Find big files.
    '''
    click.echo(f'> {size} mb.')
    p = Path(str(dir))
    cache = progress(p)
    nodes = cache.get()

    result = utils.filter_by_size(nodes, more_than=size * (1024 * 1024))
    if not json_:
        for each in result:
            click.echo(each)
    else:
        with open(json_, 'w', encoding='utf8') as f:
            temp = sorted(list(result))
            r = {'paths': [str(x) for x in temp]}
            json.dump(r, f, indent=2, ensure_ascii=False)


@click.command()
@click.argument('dir', type=click.Path(exists=True, dir_okay=True, resolve_path=True), required=True)
@click.option('-s', '--suffix', multiple=True, default=[], required=True, help="eg. mp4, png, jpg")
@click.option('--json', 'json_', type=str, default=None, help='File name to save the result in json')
@click.option('--include-sys', is_flag=True, default=False, help='Include system files in scan.')
def bysuffix(dir, suffix, json_, include_sys):
    '''
    Filter out files with suffixes.
    
    You can supply multiple suffixes with multiple '-s' switch.
    '''
    _suffixes = ['.'+str(x).lower() for x in suffix if len(x.strip()) > 0]
    if len(_suffixes) == 0:
        click.echo('The suffixes provided cannot be white spaces!')
        return

    p = Path(str(dir))
    cache = progress(p)
    nodes = cache.get()
    if not include_sys:
        nodes = utils.exclude_os_files(nodes)

    result = utils.filter_by_suffixes(nodes, _suffixes)
    if not json_:
        for each in result:
            click.echo(each)
    else:
        with open(json_, 'w', encoding='utf8') as f:
            temp = sorted(list(result))
            r = {'paths': [str(x) for x in temp]}
            json.dump(r, f, indent=2, ensure_ascii=False)


@click.command()
@click.argument('dir', type=click.Path(exists=True, dir_okay=True, resolve_path=True), required=True)
@click.option('--force', is_flag=True, help='Perform real actions. (NOT dry run)')
@click.option('--old', 'old_', required=True, type=str, default=None, help='Old name')
@click.option('--new', 'new_', required=True, type=str, default=None, help='New name')
@click.option('--json', 'json_', type=str, default=None, help='File name to save the result in json')
def renamedirs(dir, force, old_, new_, json_):
    '''
    Replace old string in dir name with new.

    Note: This is recursive.
    '''
    p = Path(str(dir))
    cache = progress(p)
    nodes = cache.get()

    # Get dirs
    dirs = utils.filter_dir(nodes)
    # Get wanted dirs
    dirs = {x for x in dirs if utils.stem_has_str(x, old_)}

    dirs = sorted(dirs, key=lambda dir: len(str(dir)), reverse=True)

    if not json_:
        click.echo('-' * 32)
        for each in dirs:
            oldName, newName = utils.rename_stem(each, old_, new_, True)
            click.echo(f'old: {oldName}')
            click.echo(f'new: {newName}')
            click.echo('-' * 16)
    else:
        with open(json_, 'w', encoding='utf8') as f:
            r = {'paths': []}
            for each in dirs:
                oldName, newName = utils.rename_stem(each, old_, new_, True)
                r['paths'].append({
                    'old': str(oldName),
                    'new': str(newName)
                })
            json.dump(r, f, indent=2, ensure_ascii=False)
    
    if force:
        for each in dirs:
            utils.rename_stem(each, old_, new_, False)
    else:
        click.echo("Warning: This is a dry run, use --force to perform actual rename action.")


@click.command()
@click.argument('dir', type=click.Path(exists=True, dir_okay=True, resolve_path=True), required=True)
@click.option('--force', is_flag=True, help='Perform real actions. (NOT dry run)')
@click.option('--old', 'old_', required=True, type=str, default=None, help='Old name')
@click.option('--new', 'new_', required=True, type=str, default=None, help='New name')
@click.option('--json', 'json_', type=str, default=None, help='File name to save the result in json')
def renamefiles(dir, force, old_, new_, json_):
    '''
    Replace old string in file names with new.

    Note: This is recursive.
    '''
    p = Path(str(dir))
    cache = progress(p)
    nodes = cache.get()

    # Get files
    output = utils.filter_file(nodes)
    # Get wanted files
    output = {x for x in output if utils.stem_has_str(x, old_)}

    if not json_:
        click.echo('-' * 32)
        for each in output:
            oldName, newName = utils.rename_stem(each, old_, new_, True)
            click.echo(f'old: {oldName}')
            click.echo(f'new: {newName}')
            click.echo('-' * 16)
    else:
        with open(json_, 'w', encoding='utf8') as f:
            r = {'paths': []}
            for each in output:
                oldName, newName = utils.rename_stem(each, old_, new_, True)
                r['paths'].append({
                    'old': str(oldName),
                    'new': str(newName)
                })
            json.dump(r, f, indent=2, ensure_ascii=False)
    
    if force:
        for each in output:
            utils.rename_stem(each, old_, new_, False)
    else:
        click.echo("Warning: This is a dry run, use --force to perform actual rename action.")


@click.command()
@click.argument('dir', type=click.Path(exists=True, dir_okay=True, resolve_path=True), required=True)
@click.option('--include-sys', is_flag=True, default=False, help='Hidden system files are considered in scan.')
@click.option('--json', 'json_', type=str, default=None, help='File name to save the result in json')
def emptydirs(dir, include_sys, json_):
    '''
    Find empty directories.
    '''
    p = Path(str(dir))
    cache = progress(p)
    nodes = cache.get()
    # Get dirs
    dirs = utils.filter_dir(nodes)

    output = set()
    if include_sys:
        output = {x for x in dirs if utils.is_empty_dir(x)}
    else:
        output = {x for x in dirs if utils.is_almost_empty_dir(x)}
    
    
    if not json_:
        click.echo('-' * 32)
        for each in output:
            click.echo(each)
    else:
        with open(json_, 'w', encoding='utf8') as f:
            temp = sorted(list(output))
            r = {'paths': [str(x) for x in temp]}
            json.dump(r, f, indent=2, ensure_ascii=False)


@click.command()
@click.argument('dir', type=click.Path(exists=True, dir_okay=True, resolve_path=True), required=True)
@click.option('-n', '--name', multiple=True, default=[], required=True, help="eg. From Russia with Love")
@click.option('--json', 'json_', type=str, default=None, help='File name to save the result in json')
@click.option('--include-sys', is_flag=True, default=False, help='Include system files in scan.')
def byname(dir, name, json_, include_sys):
    ''' Find files with names.'''
    _names = [str(x).lower() for x in name if len(x.strip()) > 0]
    if len(_names) == 0:
        click.echo('The names provided cannot be white spaces!')
        return
    
    p = Path(str(dir))
    cache = progress(p)
    nodes = cache.get()
    if not include_sys:
        nodes = utils.exclude_os_files(nodes)

    result = utils.filter_by_name(nodes, _names)
    if not json_:
        for each in result:
            click.echo(each)
    else:
        with open(json_, 'w', encoding='utf8') as f:
            temp = sorted(list(result))
            r = {'paths': [str(x) for x in temp]}
            json.dump(r, f, indent=2, ensure_ascii=False)


cli.add_command(bigfiles)
cli.add_command(duplicate)
cli.add_command(bysuffix)
cli.add_command(byname)
cli.add_command(renamedirs)
cli.add_command(renamefiles)
cli.add_command(emptydirs)


if __name__ == '__main__':
    cli()
